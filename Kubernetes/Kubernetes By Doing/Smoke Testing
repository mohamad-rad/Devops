1- Verify the cluster's ability to perform data encryption
kubectl create secret generic kubernetes-the-hard-way --from-literal="mykey=mydata"
# for check data is encrypted use this command to get data from etcd
sudo ETCDCTL_API="3 etcdctl get \"
--endpoints="https://127.0.0.1:2379 \"
--cacert="/etc/etcd/ca.pem \"
--cert="/etc/etcd/kubernetes.pem \"
--key=/etc/etcd/kubernetes-key.pem\
/registry/secrets/default/kubernetes-the-hard-way | hexdump -C
# output should look like this:
<00000000  2f 72 65 67 69 73 74 72  79 2f 73 65 63 72 65 74  |/registry/secret|>
<00000010  73 2f 64 65 66 61 75 6c  74 2f 6b 75 62 65 72 6e  |s/default/kubern|>
<00000020  65 74 65 73 2d 74 68 65  2d 68 61 72 64 2d 77 61  |etes-the-hard-wa|>
<00000030  79 0a 6b 38 73 3a 65 6e  63 3a 61 65 73 63 62 63  |y.k8s:enc:aescbc|>
<00000040  3a 76 31 3a 6b 65 79 31  3a fc 21 ee dc e5 84 8a  |:v1:key1:.!.....|>
<00000050  53 8e fd a9 72 a8 75 25  65 30 55 0e 72 43 1f 20  |S...r.u%e0U.rC. |>
# Look for k8s:enc:aescbc:v1:key1 on the right of the output to verify that the data is stored in an encrypted format!

2- Verify that deployments work.
# Create a new Deployment
kubectl run nginx --image=nginx
# Verify that the deployment created a pod and that the pod is running:
kubectl get pods -l run=nginx
# Verify that the output looks something like this:
<NAME                     READY     STATUS    RESTARTS   AGE>
<nginx-65899c769f-9xnqm   1/1       Running   0          30s>
# The pod should be in he Running STATUS


3- Verify that remote access works via port forwarding.
# First, get the pod name of the Nginx pod and store it as an environment variable:
POD_NAME="$(kubectl get pods -l run=nginx -o jsonpath="{.items[0].metadata.name}")"
# Forward port 8081 to the Nginx pod:
kubectl port-forward $POD_NAME 8081:80
# Open up a new terminal, log in to the controller server, and verify that the port forward works:
curl --head http://127.0.0.1:8081
# You should get an http 200 OK response from the Nginx pod.
# When you are done, you can stop the port-forward in the original terminal with control+c.

4- Verify that you can access container logs with kubectl logs.
# we will check the cluster's ability to retrieve container logs.
POD_NAME="$(kubectl get pods -l run=nginx -o jsonpath="{.items[0].metadata.name}")"
# Get the logs from the Nginx pod:
kubectl logs $POD_NAME
# This command should return the Nginx pod's logs. It will look something like this (but there could be more lines):
<127.0.0.1 - - [10/Sep/2018:19:29:01 +0000] "GET / HTTP/1.1" 200 612 "-" "curl/7.47.0" "-">

5- Verify that you can execute commands inside a container with `kubectl exec`.
# Now we will verify that we can execute commands inside containers running in the cluster.
<Execute a simple nginx -v command inside the nginx pod:>
kubectl exec -ti $POD_NAME -- nginx -v
# This command should return the Nginx version output, which should look like this:
<nginx version: nginx/1.19.10>

6- Verify that services work
# This test verifies that we can successfully expose services in the cluster
<Create a service to expose the Nginx deployment:>
kubectl expose deployment nginx --port 80 --type NodePort
# Get the node port assigned to the newly created service and assign it to an environment variable:
NODE_PORT="$(kubectl get svc nginx --output=jsonpath='{range .spec.ports[0]}{.nodePort}')"
# Access the service on one of the worker nodes from the controller like this. 10.0.1.102 is the private IP of one of the workers:
curl -I 10.0.1.102:$NODE_PORT
<You should get an http 200 OK response.>



